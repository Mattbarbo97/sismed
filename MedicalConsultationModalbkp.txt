import React, { useState } from 'react';
import { Box, Button, IconButton, Modal, Paper, Typography, Input, InputAdornment, TextField } from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import CancelIcon from '@mui/icons-material/Cancel';
import { useFormik } from 'formik';
import * as Yup from 'yup';
import PrintableDocument from './PrintableDocument';

//value: "", key: `Receituário-${ReceituárioCounter}`

const validationSchema = Yup.object().shape({
    Receituário: Yup.array().of(
        Yup.object().shape({
            value: Yup.string().required(
                "O campo não pode estar vazio, se não for preencher, remova o campo."
            ),
        })
    ),
    exames: Yup.array().of(
        Yup.object().shape({
            value: Yup.string().required(
                "O campo não pode estar vazio, se não for preencher, remova o campo."
            ),
        })
    ),
    anotacoes: Yup.string().required(
        "As anotações da consulta são obrigatórias."
    ),
});

const MedicalConsultationModal = ({ open, onClose, paciente, doutor, handleSave }) => {
    const [ReceituárioCounter, setReceituárioCounter] = useState(0);
    const [exameCounter, setExameCounter] = useState(0);
    const [confirmClear, setConfirmClear] = useState(false);
    const [openPrintModal, setOpenPrintModal] = useState(false);

    const formik = useFormik({
        initialValues: {
            Receituário: [],
            exames: [],
            anotacoes: "",
        },
        validationSchema: validationSchema,
        onSubmit: (values) => {
            console.log(values);
            handleSave(values);
            formik.resetForm();
        },
    });

    const handlePrintModalClose = () => {
        setOpenPrintModal(false);
      };

      const handlePrintModalOpen = () => {
        setOpenPrintModal(true);
      };
    

    const handleDeleteReceituário = (index) => {
        const newReceituário = [...formik.values.Receituário];
        newReceituário.splice(index, 1);
        formik.setFieldValue("Receituário", newReceituário);
    };

    const addReceituário = () => {
        const newReceituário = { value: "", key: `Receituário-${ReceituárioCounter}` };
        formik.setFieldValue("Receituário", [
            ...formik.values.Receituário,
            newReceituário,
        ]);
        setReceituárioCounter(ReceituárioCounter + 1);
    };

    const handleDeleteExame = (index) => {
        const newExames = [...formik.values.exames];
        newExames.splice(index, 1);
        formik.setFieldValue("exames", newExames);
    };

    const addExame = () => {
        const newExame = { value: "", key: `exame-${exameCounter}` };
        formik.setFieldValue("exames", [...formik.values.exames, newExame]);
        setExameCounter(exameCounter + 1);
    };

    return (
        <>
          <Modal open={open} onClose={onClose}>
            <Paper
              sx={{
                position: "absolute",
                bgcolor: "background.paper",
                width: "80%",
                p: 4,
                top: "50%",
                left: "50%",
                transform: "translate(-50%, -50%)",
                maxHeight: "80vh",
                overflowY: "auto",
              }}
            >
                    <Typography variant="h6" style={{ textAlign: "center" }}>
                      Novo Atendimento
                    </Typography>
                    <Typography variant="subtitle1">
                        Paciente: {paciente.nome}
                    </Typography>
                    <form onSubmit={formik.handleSubmit}>
                        <Box mb={2}>
                            <Typography variant="h6">Receituário</Typography>
                            <Box
                                display="flex"
                                flexDirection="column"
                                alignItems="center"
                                gap={2}
                            >
                                {formik.values.Receituário.map(
                                    (Receituário, index) => (
                                        <Input
                                            key={Receituário.key}
                                            value={Receituário.value}
                                            name={`Receituário[${index}].value`}
                                            onChange={formik.handleChange}
                                            error={
                                                formik.touched.Receituário &&
                                                Boolean(formik.errors.Receituário)
                                            }
                                            endAdornment={
                                                <InputAdornment position="end">
                                                    <IconButton
                                                        aria-label="delete field"
                                                        onClick={() =>
                                                            handleDeleteReceituário(
                                                                index
                                                            )
                                                        }
                                                        edge="end"
                                                    >
                                                        <CancelIcon />
                                                    </IconButton>
                                                </InputAdornment>
                                            }
                                            fullWidth
                                            multiline
                                        />
                                    )
                                )}
                                {formik.touched.Receituário &&
                                    Boolean(formik.errors.Receituário) && (
                                        <Typography
                                            variant="subtitle2"
                                            color="error"
                                        >
                                            {
                                                formik.errors.Receituário[
                                                    formik.errors.Receituário
                                                        .length - 1
                                                ].value
                                            }
                                        </Typography>
                                    )}
                            </Box>
                            <IconButton onClick={addReceituário}>
                                <AddIcon />
                            </IconButton>
                        </Box>
                        <Box mb={2}>
                            <Typography variant="h6">
                                Pedidos de Exames
                            </Typography>
                            <Box
                                display="flex"
                                flexDirection="column"
                                alignItems="center"
                                gap={2}
                            >
                                {formik.values.exames.map((exame, index) => (
                                    <Input
                                        key={exame.key}
                                        value={exame.value}
                                        name={`exames[${index}].value`}
                                        onChange={formik.handleChange}
                                        error={
                                            formik.touched.exames &&
                                            Boolean(formik.errors.exames)
                                        }
                                        endAdornment={
                                            <InputAdornment position="end">
                                                <IconButton
                                                    aria-label="delete field"
                                                    onClick={() =>
                                                        handleDeleteExame(index)
                                                    }
                                                    edge="end"
                                                >
                                                    <CancelIcon />
                                                </IconButton>
                                            </InputAdornment>
                                        }
                                        fullWidth
                                    />
                                ))}
                                {formik.touched.exames &&
                                    Boolean(formik.errors.exames) && (
                                        <Typography
                                            variant="subtitle2"
                                            color="error"
                                        >
                                            {
                                                formik.errors.exames[
                                                    formik.errors.exames
                                                        .length - 1
                                                ].value
                                            }
                                        </Typography>
                                    )}
                            </Box>
                            <IconButton onClick={addExame}>
                                <AddIcon />
                            </IconButton>
                        </Box>
                        <Box mb={2}>
                            <Typography variant="h6">
                                Anotações da Consulta
                            </Typography>
                            <TextField
                                label="Anotações"
                                value={formik.values.anotacoes}
                                name="anotacoes"
                                helperText={
                                    formik.touched.anotacoes &&
                                    formik.errors.anotacoes
                                }
                                error={
                                    formik.touched.anotacoes &&
                                    Boolean(formik.errors.anotacoes)
                                }
                                onChange={formik.handleChange}
                                fullWidth
                                multiline
                                rows={4}
                            />
                        </Box>
                    </form>
                    <Box
                      sx={{
                        display: "flex",
                        justifyContent: "space-between",
                        gap: 2,
                        mt: 2,
                      }}
                    >
                        <Button
                           variant="contained"
                           color="primary"
                           onClick={formik.handleSubmit}
                         >
                           Salvar Prontuário
                         </Button>
                         <Button
                           variant="contained"
                           color="secondary"
                           onClick={handlePrintModalOpen}
                         >
                           Preparar para Impressão
                         </Button>
                         <Button
                           variant="contained"
                           sx={{
                             backgroundColor: "#f44336",
                             "&:hover": {
                               backgroundColor: "#d32f2f",
                             },
                           }}
                           onClick={() => setConfirmClear(true)}
                         >
                            Limpar tudo
                        </Button>
                    </Box>
                </Paper>
            </Modal>
            <Modal open={confirmClear}>
                <Paper
                    sx={{
                        position: "absolute",
                        bgcolor: "background.paper",
                        width: "40%",
                        p: 4,
                        top: "50%",
                        left: "50%",
                        transform: "translate(-50%, -50%)",
                    }}
                >
                    <Typography variant="h6" align="center">
                        Tem certeza que deseja limpar tudo?
                    </Typography>
                    <Typography
                        variant="subtitle1"
                        align="center"
                        sx={{
                            color: "#f44336",
                            opacity: 0.8,
                            marginBottom: 4,
                        }}
                    >
                        Essa ação não pode ser desfeita
                    </Typography>
                    <Box
                        sx={{
                            display: "flex",
                            justifyContent: "space-between",
                            gap: 2,
                            marginTop: 2,
                        }}
                    >
                        <Button
                            variant="contained"
                            color="primary"
                            onClick={() => {
                                formik.resetForm();
                                setConfirmClear(false);
                            }}
                        >
                            Sim
                        </Button>
                        <Button
                            variant="contained"
                            sx={{
                                backgroundColor: "#f44336",
                                "&:hover": {
                                    backgroundColor: "#d32f2f",
                                },
                            }}
                            onClick={() => setConfirmClear(false)}
                        >
                            Não
                        </Button>
                    </Box>
                </Paper>
            </Modal>
            <PrintableDocument
             open={openPrintModal}
             onClose={handlePrintModalClose}
             clinica={{ nome: "Nome da Clínica", endereco: "Endereço da Clínica" }} // Use os dados reais aqui
             medico={doutor} // Supondo que 'doutor' tem propriedades como 'nome' e 'crm'
             paciente={paciente} // Supondo que 'paciente' tem propriedades como 'nome' e 'dataNascimento'
             Receituário={formik.values.Receituário.map(r => r.value).join("\n")} // Junta todas as Receituário em uma string separada por quebras de linha
           />
        </>
    );
};

export default MedicalConsultationModal;
